#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  3 09:23:45 2020

@author: sabarnikundu
"""

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    #Create A/B Files
    if create:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        if self.Afn in listfiles():
            self.Bfile.writeat(self.Afile.readat(None,0),0)
        else:
            self.Afile.writeat('SE', 0)
    else:
      #Check if Backup File Present, else raise an Exception
      if self.Afn in listfiles():
          self.Afile = openfile(self.Afn,True)
          self.Bfile = openfile(self.Bfn,True)
          self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
          self.Afile = openfile(self.Afn,False)
          self.Bfile = openfile(self.Bfn,False)
          
    
    def writeat(self,data,offset):
        if offset > 0 and offset < len(self.Bfile.readat(None,0)):
            self.Bfile.writeat(data,offset)
            
    def readat(self,bytes,offset):
        length = len(self.Afile.readat(None,0))
        if offset < 0 or length < 0:
            raise RepyArgumentError
      
        elif offset >= len(self.Afile.readat(None,0)):
            raise SeekPastEndOfFileError
      
        elif bytes > length and bytes != None:
            raise SeekPastEndOfFileError
      
        elif (len(self.Afile.readat(None,0)) < offset+length) and bytes != None:
            raise RepyArgumentError
      
        else:
      #Try Reading the File else raise Exception
          try:
              return self.Afile.readat(bytes,offset)
          except:
              raise RepyArgumentError
              
    def close(self):
        a_data = self.Afile.readat(None,0)
        b_data = self.Bfile.readat(None,0)
        backupfile = self.Afn
        self.Afile.close()
        self.Bfile.close()
        if(len(b_data) <= 1):
            exitall()

        if(b_data is ''):
            exitall()
        
        if (b_data[0] is 'S' and b_data[len(b_data)-1] is 'E'):
            removefile(self.Afn)
            new_file = openfile(self.Afn,True)
            new_file.writeat(b_data,0)
            removefile(self.Bfn)
        else:
            removefile(self.Afn)
            new_file = openfile(self.Afn,True)
            new_file.writeat(a_data,0)
            removefile(self.Bfn)
            
    def ABopenfile(filename, create):
        return ABFile(filename,create)





    sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

    CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}


    secure_dispatch_module()        
            
              
    