
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    #Checking if valid filename
    def __init__(self,filename,create):
        list = filename.split('.')
        if(list[0].isalnum() and list[0].islower() and list[1] == 'txt'):
            mycontext['debug'] = False
            self.Afn = filename+'.a'
            self.Bfn = filename+'.b'

            if create:
                self.Afile = openfile(self.Afn,create)
                self.Bfile = openfile(self.Bfn,create)
                if self.Afn in listfiles():
                    self.Bfile.writeat(self.Afile.readat(None,0),0)
                else:
                    self.Afile.writeat('SE', 0)

            else:
                self.Afile = openfile(self.Afn,True)
                self.Bfile = openfile(self.Bfn,True)
                if self.Afn in listfiles():
                    self.Bfile.writeat(self.Afile.readat(None,0),0)
                else:
                    print("File not fount")
                    raise FileNotFoundError
                    

    
    

    def writeat(self,data,offset):
        lenA = len(self.Afile.readat(None,0))
        lenB = len(self.Bfile.readat(None,0))
        self.lock = createlock()
        self.lock.acquire(True)
        if offset<0:
            raise RepyArgumentError
            self.lock.release()
        elif offset > lenB:
            self.lock.release()
            raise SeekPastEndOfFileError
        else:
            self.Bfile.writeat(data,offset)
            self.lock.release()

    def readat(self,bytes,offset):
        lenA = len(self.Afile.readat(None,0))
        lenB = len(self.Bfile.readat(None,0))

        self.lock = createlock()
        self.lock.acquire(True)

        if offset<0 or lenA<0:
            self.lock.release()
        
        elif offset>lenA-1:
            self.lock.release()
            raise SeekPastEndOfFileError

        else:
            try:
                read = self.Afile.readat(bytes,offset)
                self.lock.release()
                return read_data

            except:
                raise RepyArgumentError

    def close(self):
        backfile = self.Afn
        if self.Bfile.readat(None,0).startswith("S"):
            if self.Bfile.readat(None,0).endswith("E"):
                copy1 = self.Bfile.readat(None,0)
                self.Afile.close()
                self.Bfile.close()
                removefile(self.Afn)
                openfile(backfile,True).writeat(copy1,0)
                removefile(self.Bfn)
            else:
                copy2 = self.Afile.readat(None,0)
                self.Afile.close()
                self.Bfile.close()
                removefile(self.Afn)
                openfile(backfile,True).writeat(copy2,0)
                removefile(self.Bfn)

    def ABopenfile(filename, create):
        return ABFile(filename,create)

   
        sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

        CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}


        secure_dispatch_module()

    






        




